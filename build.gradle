import org.gradle.plugins.ide.idea.model.*


// define the properties file
ext.configFile = file "build.properties"
configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'


///////////////////////////////////////////////////
// IDE Settings
///////////////////////////////////////////////////
idea {
    project {
        languageLevel = '1.8'
    }
}

///////////////////////////////////////////////////
// ForgeGradle
///////////////////////////////////////////////////
version = (hasProperty("CIRevision") ? CIRevision : config.mod_version)
group = config.group_name
archivesBaseName = "${config.mod_id}-${config.minecraft_version}"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
    runDir = "run"

    mappings = config.mcp_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@MOD_VERSION@', version
    replace '@MOD_ID@', config.mod_id
    if (hasProperty("CIRevision")) {
        replace '@BUILT_BY_CI@', "true"
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand ([
                'version':project.version,
                'mcversion':project.minecraft.version,
                'forge_version': config.forge_version,
                'mod_version': config.mod_version,
                'minecraft_version': config.minecraft_version
        ])
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = 'universal'
}

///////////////////////////////////////////////////
// SHADING
///////////////////////////////////////////////////
buildscript {
    repositories {
        jcenter()
        //mavenLocal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    def deobfPrefix = "deobf."// + minecraft.mappingsChannel + '.' + minecraft.mappingsVersion + '.'
    println deobfPrefix
    dependencies {
        include(dependency(deobfPrefix + 'com.foudroyantfactotum:Structure-' + config.minecraft_version + ':' + config.structure_version))
    }
    relocate 'com.foudroyantfactotum.tool.structure', 'com.github.atomicblom.hcmw.shaded.structure'
    classifier = 'universal'
}

reobf.jar.task.dependsOn shadowJar

///////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////
if (config.structure_local_enabled == "true") {
    println("Using Structure from local path - You cannot produce a build with this configuration")
    def newModuleLocation = file(config.structure_local_path)
    def existingModule = idea.project.modules[0]
    def newIml = new IdeaModuleIml(existingModule.iml.xmlTransformer, newModuleLocation)
    def newModule = new IdeaModule(existingModule.project, newIml)
    newModule.name = "Structure"
    newModule.contentRoot = newModuleLocation
    newModule.sourceDirs = [newModuleLocation]

    idea {
        project {
            modules += newModule
        }
        module {
            iml {
                //Not a lot of documentation how to add a module dependency without using Multi-projects.
                withXml {
                    def node = it.asNode()
                    node.children()[0].appendNode('orderEntry', ["type": "module", "module-name": newModule.name])
                }
            }
        }
    }
} else {
    dependencies {
        repositories {
            maven {
                url 'http://repository.steamnsteel.info/artifactory/atomicblom-libs-unstable'
            }
        }
        deobfCompile(group: 'com.foudroyantfactotum', name: 'Structure-' + config.minecraft_version, version: config.structure_version, classifier: 'universal')
    }
}